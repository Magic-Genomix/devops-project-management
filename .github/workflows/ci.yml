name: CI/CD Workflow for Event Management App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Backend - Test Spring Boot Application
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event_manager_db
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 21 (for Spring Boot)
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'zulu'

      # Step 3: Run tests (without building the backend)
      - name: Run backend tests
        run: mvn test -f Back/pom.xml

  # Job 2: Backend - Build Spring Boot Application
  backend-build:
    runs-on: ubuntu-latest
    needs: backend-test  # Ensure tests are successful before building

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event_manager_db
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 21 (for Spring Boot)
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'zulu'

      # Step 3: Build the backend with Maven
      - name: Build with Maven (Debug Mode)
        run: mvn install -X -f Back/pom.xml

  # Job 3: Frontend - Build and Test Angular Application
  frontend:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Node.js 20.19.0 (for Angular)
      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'

      # Step 3: Install Angular dependencies
      - name: Install Angular dependencies
        run: npm install --prefix Front

      # Step 4: Build Angular application for production
      - name: Build Angular production
        run: npm run build --prefix Front --prod

  # Job 4: Dockerize and Build the Services
  dockerize:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend]  # Ensure the previous jobs run before this one

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Set up Docker Compose (install docker-compose if needed)
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Step 4: Build and push Docker images for backend, frontend, and db
      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      # Step 5: Start services with Docker Compose
      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

  # Job 5: Selenium Test Job
  selenium-test:
    runs-on: ubuntu-latest
    needs: dockerize
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
        options: --health-cmd "curl --silent --fail http://localhost:4444/wd/hub/status" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'

      - name: Install dependencies
        run: |
          npm install selenium-webdriver --prefix Front

      - name: Run Selenium Test for Frontend
        run: |
          # Ex√©cution du test Selenium en utilisant Node.js
          node Front/test.js  # Votre script Selenium est dans 'Front/test.js'
