name: CI/CD Workflow for Event Management App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs: 


  # Job 1: Backend - Test Spring Boot Application
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event_manager_db
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'zulu'

      - name: Run backend tests
        run: mvn test -f Back/pom.xml

  # Job 2: Backend - Build Spring Boot Application
  backend-build:
    runs-on: ubuntu-latest
    needs: [backend-test]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event_manager_db
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'zulu'

      - name: Build with Maven (Debug Mode)
        run: mvn install -X -f Back/pom.xml

  # Job 3: Frontend - Build and Test Angular Application
  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'

      - name: Install Angular dependencies
        run: npm install --prefix Front

      - name: Build Angular production
        run: npm run build --prefix Front --prod


  # Job 3: Frontend - Build and Test Angular Application
  selenium:
    runs-on: ubuntu-latest
    needs: [backend-build,frontend]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: event_manager_db
        ports:
          - 5432:5432
        options: --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5 
      selenium:
        image: selenium/standalone-chrome  
        ports:
          - "4444:4444"
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'zulu'
      
      - name: Run spring
        run: |
          nohup mvn spring-boot:run -f Back/pom.xml &
      
      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'
      
      - name: Install Angular dependencies
        run: npm install --prefix Front
      
      - name: Run Angular
        run: |
          nohup npm start --prefix Front &

      
      - name: Check if Angular is running
        run: |
            sleep 10  # Attendre un peu pour que Angular démarre
            curl -s http://localhost:4200 
        
      - name: Check if Spring Boot is running
        run: |
            curl -s http://localhost:8080/auth/welcome 
        
      - name: Run Selenium Tests
        run: |
          cd Front  # Se déplacer dans le répertoire Front
          node test.js  # Exécuter le script de test.js


  # Job 4: Dockerize and Build the Services
  dockerize-selenium-test:
    runs-on: ubuntu-latest
    needs: [selenium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Display the hostname of the frontend container
        run: |
          FRONTEND_CONTAINER=$(docker ps -qf "name=event-frontend")
          HOSTNAME=$(docker exec $FRONTEND_CONTAINER hostname)
          echo "Host: $HOSTNAME"

      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'

      - name: Install dependencies
        run: |
            cd Front  # Se déplacer dans le répertoire Front
            npm install  # Installez les dépendances nécessaires pour vos tests Selenium
 
      - name: Run Selenium Tests
        run: |
            cd Front  # Se déplacer dans le répertoire Front
            node testDocker.js  # Exécuter le script de test.js
    


  # Previous jobs (backend-test, backend-build, frontend, selenium, dockerize-selenium-test)

  # Job 5: Push Docker images to a single repository in Docker Hub with versioning
  push-docker-image:
    runs-on: ubuntu-latest
    needs: [dockerize-selenium-test]  # Ensure this job runs after the dockerize-selenium-test job

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Make sure to set this secret in your repository settings
          password: ${{ secrets.DOCKER_PASSWORD }}  # Make sure to set this secret in your repository settings

      - name: Set image tag
        id: vars
        run: |
          IMAGE_TAG=latest-${GITHUB_SHA:0:7}  # Using the first 7 characters of the commit SHA as the tag
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "Using tag: $IMAGE_TAG"
      
      - name: Build Docker image for Backend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-app-backend:${{ env.IMAGE_TAG }} -f Back/Dockerfile .
          
      - name: Build Docker image for Frontend
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/event-app-frontend:${{ env.IMAGE_TAG }} -f Front/Dockerfile .
      
      - name: Push Backend image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app-backend:${{ env.IMAGE_TAG }}

      - name: Push Frontend image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app-frontend:${{ env.IMAGE_TAG }}
