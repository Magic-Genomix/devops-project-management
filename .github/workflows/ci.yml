name: CI/CD Workflow for Event Management App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs: 



  # Job 4: Dockerize and Build the Services
  dockerize-selenium-test:
    runs-on: ubuntu-latest
    #needs: [selenium]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      - name: List Docker images (Debugging step)
        run: |
          # Afficher les images Docker disponibles pour vérifier si les images sont créées
          docker images

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Set up Node.js 20.19.0
        uses: actions/setup-node@v2
        with:
          node-version: '20.19.0'

      - name: Install dependencies
        run: |
          cd Front  # Se déplacer dans le répertoire Front
          npm install  # Installez les dépendances nécessaires pour vos tests Selenium

      - name: Run Selenium Tests
        run: |
          cd Front  # Se déplacer dans le répertoire Front
          node testDocker.js  # Exécuter le script de test.js

      # Arrêter les conteneurs avant de tagger et de pousser les images
      - name: Stop Docker containers
        run: |
          docker-compose -f docker-compose.yml down

      # Après les tests Selenium, on fait le push des images Docker
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tag and Push Docker images
        run: |
          # Vérifier les images disponibles avant de les tagger
          docker images
          
          # Tag les images avec la version et le hash de commit
          docker tag event-backend:latest ${{ secrets.DOCKER_USERNAME }}/event-app:backend-latest
          docker tag event-frontend:latest ${{ secrets.DOCKER_USERNAME }}/event-app:frontend-latest

          # Pousser les images vers Docker Hub
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app:backend-latest
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app:frontend-latest
