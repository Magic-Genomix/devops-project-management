name: Release Workflow

on:
  workflow_run:
    workflows: ["CI/CD Workflow"]  # Name of your CI workflow (ci.yml)
    types:
      - completed  # Trigger when the workflow completes

permissions:
  contents: write  # Allow pushing to the repository (required for git commit or pushing changes)
  id-token: write  # Required for creating release tags

jobs:
  versioning-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Ensure full history, including tags

      - name: Set up Git
        run: |
          git config --global user.email "melabadi@magic-genomix.com"
          git config --global user.name "elabadi02"

      - name: Fetch all tags
        run: |
          git fetch --tags  # Fetch all tags

      - name: Check commit message for versioning flag
        id: check_commit_message
        run: |
          FLAG=$(git log -1 --pretty=%B)
          echo "Commit message: $FLAG"
          if [[ "$FLAG" != *"major"* && "$FLAG" != *"minor"* && "$FLAG" != *"patch"* ]]; then
            echo "No versioning flag found in commit message. Exiting."
            exit 1  # Exit with a non-zero status to fail the job
          fi

      - name: Get latest tag
        id: get_latest_tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest version: $VERSION"
          echo "LATEST_TAG=$VERSION" >> $GITHUB_ENV  # Set the latest tag as an environment variable

      - name: Determine the new version based on the versioning flag
        id: determine_version
        run: |
          VERSION=${{ env.LATEST_TAG }}
          VERSION=${VERSION//v/}  # Remove 'v' from version string

          # Extract major, minor, patch from the version
          IFS='.' read -r -a VERSION_ARRAY <<< "$VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}

          FLAG=$(git log -1 --pretty=%B)
          if [[ "$FLAG" == *"major"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$FLAG" == *"minor"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$FLAG" == *"patch"* ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Set the new version as an environment variable

      - name: Create new Git tag (force push)
        run: |
            NEW_VERSION=${{ env.NEW_VERSION }}
            git tag -f $NEW_VERSION  # Force create the tag locally
            git push origin -f $NEW_VERSION  # Force push the tag to the remote
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



      # Docker Steps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yml build

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Tag Docker images with the new version
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          docker tag event-backend:latest ${{ secrets.DOCKER_USERNAME }}/event-app:backend-${NEW_VERSION}
          docker tag event-frontend:latest ${{ secrets.DOCKER_USERNAME }}/event-app:frontend-${NEW_VERSION}

      - name: Push Docker images to Docker Hub
        run: |
          NEW_VERSION=${{ env.NEW_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app:backend-${NEW_VERSION}
          docker push ${{ secrets.DOCKER_USERNAME }}/event-app:frontend-${NEW_VERSION}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: ${{ env.NEW_VERSION }}  # Use the new version tag created earlie
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # Ensure that the job only runs when the CI workflow completes successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' && contains(github.event.workflow_run.head_commit.message, 'major') || contains(github.event.workflow_run.head_commit.message, 'minor') || contains(github.event.workflow_run.head_commit.message, 'patch') }}
