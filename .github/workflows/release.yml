name: Release Workflow

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Allow pushing to the repository (this is required for actions like git commit or pushing changes))
  id-token: write  # If you need to generate release tags or other actions that interact with the GitHub API

jobs:
  versioning-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.email "melabadi@magic-genomix.com"
          git config --global user.name "elabadi02"

      - name: Check commit message for versioning flag
        id: check_commit_message
        run: |
          # Get the latest commit message
          FLAG=$(git log -1 --pretty=%B)
          echo "Commit message: $FLAG"
          # Check if the commit message contains "major", "minor", or "patch"
          if [[ "$FLAG" != *"major"* && "$FLAG" != *"minor"* && "$FLAG" != *"patch"* ]]; then
            echo "No versioning flag found in commit message. Exiting."
            exit 1  # Exit with a non-zero status to fail the job
          fi

      - name: Get latest tag
        id: get_latest_tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest version: $VERSION"
          echo "LATEST_TAG=$VERSION" >> $GITHUB_ENV  # Set the latest tag as an environment variable

      - name: Determine the new version based on the versioning flag
        id: determine_version
        run: |
          VERSION=${{ env.LATEST_TAG }}
          VERSION=${VERSION//v/}  # Remove 'v' from the version string

          # Extract major, minor, patch from the version
          IFS='.' read -r -a VERSION_ARRAY <<< "$VERSION"
          MAJOR=${VERSION_ARRAY[0]}
          MINOR=${VERSION_ARRAY[1]}
          PATCH=${VERSION_ARRAY[2]}

          # Check the flag in commit message (use flags like 'major', 'minor', 'patch' in commit message)
          FLAG=$(git log -1 --pretty=%B)
          if [[ "$FLAG" == *"major"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$FLAG" == *"minor"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$FLAG" == *"patch"* ]]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV  # Set the new version as an environment variable

      - name: Create new Git tag (force push)
        run: |
            NEW_VERSION=${{ env.NEW_VERSION }}
            git tag -f $NEW_VERSION  # Force create the tag locally
            git push origin -f $NEW_VERSION  # Force push the tag to the remote repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
            tag_name: ${{ env.NEW_VERSION }}  # Use the new version tag created earlier
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
